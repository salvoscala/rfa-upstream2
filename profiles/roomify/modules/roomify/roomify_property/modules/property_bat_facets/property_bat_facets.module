<?php

/**
 * @file
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function property_bat_facets_ctools_plugin_api($module, $api) {
  if ($module == 'facetapi' && $api == 'facetapi_defaults') {
    return array('version' => '1');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function property_bat_facets_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'search_api_query_alter' && isset($implementations['property_bat_facets'])) {
    $group = $implementations['property_bat_facets'];
    unset($implementations['property_bat_facets']);
    $implementations['property_bat_facets'] = $group;
  }
}

/**
 * Implements hook_facetapi_facet_info_alter().
 */
function property_bat_facets_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  switch ($searcher_info['adapter']) {
    case 'search_api':
      foreach ($facet_info as $name => $info) {
        if ($name == 'type_id') {
          $facet_info[$name]['query types'][] = 'bat_state';
        }
      }
      break;
  }
}

/**
 * Callback for facet availability form.
 */
function property_bat_facets_availability($form, &$form_state) {
  $params = drupal_get_query_parameters();
  $now = date_create();

  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  // Year defaults to current year, although we are not filtering yet.
  $default_year = $now->format('Y');

  // Month doesn't have a default selection.
  $default_month = '';

  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );

  if (isset($params['bat_start_date']) && !empty($params['bat_start_date'])) {
    $validation = date_parse(check_plain($params['bat_start_date']));
    if ($validation['error_count'] == 0) {
      $start_date = new DateTime(check_plain($params['bat_start_date']));
      $arrival = $start_date->format('Y-m-d');
    }
  }
  if (isset($params['bat_end_date']) && !empty($params['bat_end_date'])) {
    $validation = date_parse(check_plain($params['bat_end_date']));
    if ($validation['error_count'] == 0) {
      $end_date = new DateTime(check_plain($params['bat_end_date']));
      $departure = $end_date->format('Y-m-d');
    }
  }

  // Create unique ids and selectors for each picker.
  $start_date_id = drupal_html_id('datepicker-start-date');
  $start_date_selector = '#' . $start_date_id . ' .form-text';

  $end_date_id = drupal_html_id('datepicker-end-date');
  $end_date_selector = '#' . $start_date_id . ' .form-text';

  $days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 0);

  $allowed_values = array();

  $start_date = new DateTime();
  if ($days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 0)) {
    $start_date->add(new DateInterval('P' . $days_advance . 'D'));
  }

  $end_date = clone($start_date);
  $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);
  $end_date->add(new DateInterval('PT' . $future_limit . 'S'));

  $options = array(0 => t('All Areas'));
  $vid = taxonomy_vocabulary_machine_name_load('location')->vid;
  $terms = taxonomy_get_tree($vid);
  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }

  if (variable_get('roomify_availability_search_form_location', 'area') == 'area') {
    $options = array(0 => t('All Areas'));
    $vid = taxonomy_vocabulary_machine_name_load('location')->vid;
    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $term) {
      $options[$term->tid] = $term->name;
    }
  }
  elseif (variable_get('roomify_availability_search_form_location', 'area') == 'area_type') {
    $options = array(0 => t('All Area types'));
    $vid = taxonomy_vocabulary_machine_name_load('area_type')->vid;
    $terms = taxonomy_get_tree($vid, 0, NULL, TRUE);
    foreach ($terms as $term) {
      $name = field_get_items('taxonomy_term', $term, 'name_field');
      $options[$term->tid] = $term->name;
    }
  }

  $default_value_location = 0;

  if (isset($params['location'])) {
    $default_value_location = check_plain($params['location']);
  }
  if (isset($params['field_sp_area_type'])) {
    $default_value_location = check_plain($params['field_sp_area_type']);
  }

  $form['container']['location'] = array(
    '#type' => 'select',
    '#title' => t('Location'),
    '#options' => $options,
    '#chosen' => TRUE,
    '#default_value' => $default_value_location,
  );

  // Specify the default datepicker parameters (see date_popup_element_info())
  $datepicker_options = array(
    'minDate' => '+' . $days_advance . 'd',
    'maxDate' => '+' . ($future_limit / 86400) . 'd',
    'numberOfMonths' => 1,
    'changeMonth' => FALSE,
    'changeYear' => FALSE,
  );

  $form['container']['arrival'] = array(
    '#prefix' => '<div class="form-wrapper bat-date-range"><div class="start-date" id="' . $start_date_id . '">',
    '#title' => t('Arrival'),
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#description' => '',
    '#date_format' => $date_format,
    '#default_value' => isset($arrival) ? $arrival : '',
    '#datepicker_options' => array_merge($datepicker_options, array('endDateSelector' => $end_date_selector)),
    '#required' => FALSE,
    '#attributes' => array('placeholder' => t('Arrival')),
  );

  $form['container']['departure'] = array(
    '#prefix' => '<div class="end-date" id="' . $end_date_id . '">',
    '#suffix' => '</div></div>',
    '#type' => 'date_popup',
    '#title' => t('Departure'),
    '#description' => '',
    '#date_format' => $date_format,
    '#default_value' => isset($departure) ? $departure : '',
    '#datepicker_options' => array_merge($datepicker_options, array('startDateSelector' => $start_date_selector, 'endDateDays' => 1)),
    '#required' => FALSE,
    '#attributes' => array('placeholder' => t('Departure')),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'bat') . '/js/bat_date_popup.js',
        array(
          'data' => array(
            'bat' => array(
              'batBookingStartDay' => variable_get('bat_event_start_date', 0),
              'batDateFormat' => 'dd/mm/yy',

              // Here we create a listing of all datepickers registered on the
              // current page. This is available for use in your own custom
              // jQuery scripts as Drupal.settings.bat.datepickers.
              'datepickers' => array(
                $start_date_selector => array(
                  'endDateSelector' => $end_date_selector,
                ),
              ),
            ),
          ),
          'type' => 'setting',
        ),
      ),
      'css' => array(drupal_get_path('module', 'roomify_listing_availability_search_block') . '/skin/single-melon.datepicker.css'),
    ),
  );

  $group_options = array(
    0 => t('All'),
    1 => t('1 guest'),
  );

  $max_group_size = variable_get('roomify_max_property_type_capacity') ? variable_get('roomify_max_property_type_capacity') : 15;
  for ($i = 2; $i <= $max_group_size; $i++) {
    $group_options[$i] = $i . t(' guests');
  }

  $form['container']['group_size'] = array(
    '#type' => 'select',
    '#title' => t('Group size'),
    '#description' => '',
    '#options' => $group_options,
    '#default_value' => isset($params['group_size']) ? check_plain($params['group_size']) : 0,
  );

  $form['container']['submit'] = array(
    '#prefix' => '<div class="search-availability-submit">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Validation handler for property_bat_facets_availability form.
 */
function property_bat_facets_availability_validate($form, &$form_state) {
  if (!isset($form_state['values']['arrival']) && !isset($form_state['values']['departure'])) {
    $group_size = $form_state['values']['group_size'];
    $location = $form_state['values']['location'];
    $segment = '';

    if (variable_get('roomify_availability_search_form_location', 'area') == 'area_type') {
      $segment_location = 'field_sp_area_type';
    }
    else {
      $segment_location = 'location';
    }

    if ($location) {
      $area_term = taxonomy_term_load($location);
      $location_filter = str_replace(' ', '-', $area_term->name);
      $location_filter = str_replace("'", '', $location_filter);

      $segment .= '/' . $segment_location . '/' . $location_filter;
    }

    if ($group_size) {
      $max_group_size = variable_get('roomify_max_property_type_capacity', '100');
      // Filter search from group_size to the maximum capacity of the biggest
      // type in the site.
      if ($group_size >= $max_group_size) {
        $group_size = $max_group_size;
      }
      $segment .= '/capacity/' . '[' . $group_size . ' TO ' . $max_group_size . ']';
    }

    drupal_goto('availability-search' . $segment, array(
      'query' => array(
        $segment_location => $location,
        'group_size' => $group_size,
      ),
    ));
  }

  if (isset($form_state['values']['arrival']) && !isset($form_state['values']['departure'])) {
    form_set_error('departure', t('Departure date is required.'));
  }

  if (!isset($form_state['values']['arrival']) && isset($form_state['values']['departure'])) {
    form_set_error('arrival', t('Arrival date is required.'));
  }
}

/**
 * Submit handler for property_bat_facets_availability form.
 */
function property_bat_facets_availability_submit($form, &$form_state) {

  // Set location to "All" if not selected.
  $location = $form_state['values']['location'];
  if (!$location) {
    $location = 'All';
  }

  if (variable_get('roomify_availability_search_form_location', 'area') == 'area_type') {
    $segment_location = 'field_sp_area_type';
  }
  else {
    $segment_location = 'location';
  }

  $group_size = $form_state['values']['group_size'];
  $segment = '';

  if ($location != 'All') {
    $area_term = taxonomy_term_load($location);
    $location_filter = str_replace(' ', '-', $area_term->name);
    $segment .= '/' . $segment_location . '/' . $location_filter;
  }

  if ($group_size) {
    $max_group_size = variable_get('roomify_max_property_type_capacity', '100');
    // Filter search from group_size to the maximum capacity of the biggest
    // type in the site.
    if ($group_size >= $max_group_size) {
      $group_size = $max_group_size;
    }
    $segment .= '/capacity/' . '[' . $group_size . ' TO ' . $max_group_size . ']';
  }

  $form_state['redirect'] = array('availability-search' . $segment, array('query' => array('bat_start_date' => $form_state['values']['arrival'], 'bat_end_date' => $form_state['values']['departure'], $segment_location => $form_state['values']['location'], 'group_size' => $form_state['values']['group_size'])));
}

/**
 * Implements hook_search_api_query_alter().
 *
 * @param SearchApiQueryInterface $query
 *   The search query being executed.
 */
function property_bat_facets_search_api_query_alter($query) {
  if ($query->getIndex()->getEntityType()) {
    $info = entity_get_info($query->getIndex()->getEntityType());

    // Only modify the query if this query is against roomify_property.
    if ($info['base table'] == 'roomify_properties') {
      $query->sort('property_id', 'DESC');

      // Get this widget's settings.
      $index = $query->getIndex();
      $facets = facetapi_get_enabled_facets('search_api@' . $index->machine_name);
      $adapter = facetapi_adapter_load('search_api@' . $index->machine_name);
      $realm = facetapi_realm_load('block');

      if (isset($facets['property_bat_type_reference'])) {
        $settings = $adapter->getFacetSettings($facets['property_bat_type_reference'], $realm);

        // Get URL parameters.
        $params = drupal_get_query_parameters();

        // See if we have dates to search.
        if (isset($params['bat_start_date']) &&
            !empty($params['bat_start_date']) &&
            isset($params['bat_end_date']) &&
            !empty($params['bat_end_date'])) {

          $validation1 = date_parse(check_plain($params['bat_start_date']));
          $validation2 = date_parse(check_plain($params['bat_end_date']));
          if ($validation1['error_count'] == 0 && $validation2['error_count'] == 0) {
            $start_date = new DateTime(check_plain($params['bat_start_date']));
            $end_date = new DateTime(check_plain($params['bat_end_date']));
            // Remove a minute because BAT considers as included.
            $end_date->sub(new DateInterval('PT1M'));

            if ($start_date <= $end_date) {
              $event_type = $settings->settings['event_type'];

              $valid_states = $settings->settings['states'];

              $valid_states_names = array();
              foreach ($valid_states as $state_id) {
                $state = bat_event_load_state($state_id);
                $valid_states_names[] = $state['machine_name'];
              }

              $valid_properties_ids = array();

              $properties = entity_load('roomify_property', FALSE, array(), TRUE);
              $properties_ids = roomify_property_ids();

              foreach ($properties as $property) {
                $types = field_get_items('roomify_property', $property, 'property_bat_type_reference');

                if (!empty($types)) {
                  foreach ($types as $type_id) {
                    $type = bat_type_load($type_id['target_id']);

                    if (bat_event_get_matching_units($start_date, $end_date, $valid_states_names, $type->type_id, $event_type) !== FALSE) {
                      // Include the property in the search.
                      $valid_properties_ids[] = $property->property_id;
                    }
                  }
                }
              }

              $context = array(
                'types_before_search' => $properties_ids,
                'start_date' => $start_date,
                'end_date' => $end_date,
                'event_type' => $event_type,
                'valid_states' => $valid_states,
              );

              drupal_alter('property_bat_facets_search_results', $valid_properties_ids, $context);

              // If no types are available, zero out results.
              if (empty($valid_properties_ids)) {
                $query->condition($info['entity keys']['id'], 1, '<');
              }
              else {
                // Limit the search API query to entity ids with availability.
                $query->condition($info['entity keys']['id'], $valid_properties_ids, 'IN');
              }
            }
            else {
              $query->condition($info['entity keys']['id'], 1, '<');
            }
          }
          else {
            $query->condition($info['entity keys']['id'], 1, '<');
          }
        }

        // Activities.
        if (isset($params['bat_activity_date']) && !empty($params['bat_activity_date'])) {
          $start_date = new DateTime(check_plain($params['bat_activity_date']));
          $end_date = clone($start_date);
          // Remove a minute because BAT considers as included.
          $end_date->sub(new DateInterval('PT1M'));

          $event_types = array(
            'single_day_activity',
            'multi_day_activity',
            'single_day_tour',
            'multi_day_tour',
          );
          $all_valid_states = array(
            'single_day_activity_availabile',
            'multi_day_activity_availabile',
            'single_day_tour_availabile',
            'multi_day_tour_availabile',
          );

          $valid_properties_ids = array();

          $properties = entity_load('roomify_property', FALSE, array(), TRUE);
          $properties_ids = roomify_property_ids();
          foreach ($properties as $property) {

            $types = field_get_items('roomify_property', $property, 'property_bat_type_reference');

            if (!empty($types)) {
              foreach ($types as $type_id) {
                $type = bat_type_load($type_id['target_id']);

                $allowed_dates = roomify_activity_get_allowed_dates($type->type, $type->type_id, $start_date->format('Y'), $start_date->format('m'));
                if (in_array($start_date->format('Y-m-d'), $allowed_dates)) {
                  $valid_properties_ids[] = $property->property_id;
                }
              }
            }
          }

          $context = array(
            'types_before_search' => $properties_ids,
            'start_date' => $start_date,
            'end_date' => $end_date,
            'event_type' => $event_types,
            'valid_states' => $all_valid_states,
          );

          drupal_alter('property_bat_facets_search_results', $valid_properties_ids, $context);

          // If no types are available, zero out results.
          if (empty($valid_properties_ids)) {
            $query->condition($info['entity keys']['id'], 1, '<');
          }
          else {
            // Limit the search API query to entity ids with availability.
            $query->condition($info['entity keys']['id'], $valid_properties_ids, 'IN');
          }
        }
      }
    }
  }
}

/**
 * Callback for facet availability form.
 */
function property_bat_activity_facets_availability($form, &$form_state) {
  $params = drupal_get_query_parameters();
  $now = date_create();

  $date_format = variable_get('bat_daily_date_format', 'Y-m-d');

  // Year defaults to current year, although we are not filtering yet.
  $default_year = $now->format('Y');

  // Month doesn't have a default selection.
  $default_month = '';

  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );

  if (isset($params['bat_activity_date']) && !empty($params['bat_activity_date'])) {
    $validation = date_parse(check_plain($params['bat_activity_date']));
    if ($validation['error_count'] == 0) {
      $start_date = new DateTime(check_plain($params['bat_activity_date']));
      $arrival = $start_date->format('Y-m-d');
    }
  }

  // Create unique ids and selectors for each picker.
  $start_date_id = drupal_html_id('datepicker-start-date');
  $start_date_selector = '#' . $start_date_id . ' .form-text';

  $days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 0);

  $allowed_values = array();

  $start_date = new DateTime();
  if ($days_advance = variable_get('roomify_accommodation_booking_days_in_advance', 0)) {
    $start_date->add(new DateInterval('P' . $days_advance . 'D'));
  }

  $future_limit = variable_get('roomify_accommodation_booking_future_limit', 31104000);

  if (variable_get('roomify_availability_search_form_location', 'area') == 'area') {
    $options = array(0 => t('All Areas'));
    $vid = taxonomy_vocabulary_machine_name_load('location')->vid;
    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $term) {
      $options[$term->tid] = $term->name;
    }
  }
  elseif (variable_get('roomify_availability_search_form_location', 'area') == 'area_type') {
    $options = array(0 => t('Areas types'));
    $vid = taxonomy_vocabulary_machine_name_load('area_type')->vid;
    $terms = taxonomy_get_tree($vid, 0, NULL, TRUE);
    foreach ($terms as $term) {
      $name = field_get_items('taxonomy_term', $term, 'name_field');
      $options[$term->tid] = $term->name;
    }
  }

  $default_value_location = 0;

  if (isset($params['location'])) {
    $default_value_location = check_plain($params['location']);
  }
  if (isset($params['field_sp_area_type'])) {
    $default_value_location = check_plain($params['field_sp_area_type']);
  }

  $form['container']['location'] = array(
    '#type' => 'select',
    '#title' => t('Location'),
    '#options' => $options,
    '#chosen' => TRUE,
    '#default_value' => $default_value_location,
  );

  // Specify the default datepicker parameters (see date_popup_element_info())
  $datepicker_options = array(
    'minDate' => '+' . $days_advance . 'd',
    'maxDate' => '+' . ($future_limit / 86400) . 'd',
    'numberOfMonths' => 1,
    'changeMonth' => FALSE,
    'changeYear' => FALSE,
  );

  $form['container']['arrival'] = array(
    '#prefix' => '<div class="form-wrapper bat-date-range"><div class="start-date" id="' . $start_date_id . '">',
    '#title' => t('Activity Date'),
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#description' => '',
    '#date_format' => $date_format,
    '#default_value' => isset($arrival) ? $arrival : '',
    '#datepicker_options' => array_merge($datepicker_options),
    '#required' => FALSE,
    '#attributes' => array('placeholder' => t('Activity Date')),
  );

  $group_options = array(
    0 => t('All'),
    1 => t('1 guest'),
  );

  $max_group_size = variable_get('roomify_max_property_type_capacity') ? variable_get('roomify_max_property_type_capacity') : 15;

  for ($i = 2; $i <= $max_group_size; $i++) {
    $group_options[$i] = $i . t(' guests');
  }

  $form['container']['group_size'] = array(
    '#type' => 'select',
    '#title' => t('Group size'),
    '#description' => '',
    '#options' => $group_options,
    '#default_value' => isset($params['group_size']) ? $params['group_size'] : 0,
  );

  $form['container']['submit'] = array(
    '#prefix' => '<div class="search-availability-submit">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Validation handler for property_bat_facets_availability form.
 */
function property_bat_activity_facets_availability_validate($form, &$form_state) {
  if (!isset($form_state['values']['arrival'])) {
    $group_size = $form_state['values']['group_size'];
    $location = $form_state['values']['location'];
    $segment = '';

    if (variable_get('roomify_availability_search_form_location', 'area') == 'area_type') {
      $segment_location = 'field_sp_area_type';
    }
    else {
      $segment_location = 'location';
    }

    if ($location) {
      $area_term = taxonomy_term_load($location);
      $location_filter = str_replace(' ', '-', $area_term->name);
      $segment .= '/' . $segment_location . '/' . $location_filter;
    }
    if ($group_size) {
      // Filter search from group_size to 100 (A high number to match all
      // the properties available that have a capacity >= group_size).
      $segment .= '/capacity/[' . $group_size . ' TO 100]';
    }

    drupal_goto('activities-search' . $segment, array(
      'query' => array(
        $segment_location => $location,
        'group_size' => $group_size,
      ),
    ));
  }
}

/**
 * Submit handler for property_bat_facets_availability form.
 */
function property_bat_activity_facets_availability_submit($form, &$form_state) {
  // Set location to "All" if not selected.
  $location = $form_state['values']['location'];
  if (!$location) {
    $location = 'All';
  }

  if (variable_get('roomify_availability_search_form_location', 'area') == 'area_type') {
    $segment_location = 'field_sp_area_type';
  }
  else {
    $segment_location = 'location';
  }

  $group_size = $form_state['values']['group_size'];
  $segment = '';

  if ($location != 'All') {
    $area_term = taxonomy_term_load($location);
    $location_filter = str_replace(' ', '-', $area_term->name);
    $segment .= '/' . $segment_location . '/' . $location_filter;
  }

  if ($group_size) {
    // Filter search from group_size to 100 (A high number to match all
    // the properties available that have a capacity >= group_size).
    $segment .= '/capacity/[' . $group_size . ' TO 100]';
  }

  $form_state['redirect'] = array('activities-search' . $segment, array('query' => array('bat_activity_date' => $form_state['values']['arrival'], $segment_location => $form_state['values']['location'], 'group_size' => $form_state['values']['group_size'])));
}
