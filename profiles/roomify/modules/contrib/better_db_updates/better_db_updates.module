<?php

/**
 * @file
 * Core functions for the Better db Update API module.
 */

/**
 * Implements hook_batch_alter().
 */
function better_db_updates_batch_alter(&$batch) {
  foreach ($batch['sets'] as $set_id => $set) {
    // If batch is generated by 'drush updb' or update.php, ensure that the
    // Better DB Update hooks are always run.
    if (isset($set['finished']) && in_array($set['finished'], array('drush_update_finished', 'update_finished'))) {
      foreach ($set['operations'] as $operation_id => $operation) {
        if ($operation[1][0] == 'better_db_updates' && $operation[1][1] == 7000) {
          $batch['sets'][$set_id]['operations'][$operation_id][0] = 'better_db_updates_update_7000';
        }
      }
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function better_db_updates_modules_installed($modules) {
  $all_files = better_db_updates_get_updates($modules);

  foreach ($all_files as $module => $updates) {
    foreach ($updates as $info) {
      $record = array(
        'timestamp' => 0,
        'module_name' => $module,
        'update_filename' => $info->name,
      );
      drupal_write_record('better_db_updates', $record);
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function better_db_updates_modules_uninstalled($modules) {
  foreach ($modules as $module) {
    db_delete('better_db_updates')
      ->condition('module_name', $module)
      ->execute();
  }
}

/**
 * Implements hook_better_db_updates_directory().
 */
function better_db_updates_better_db_updates_directory() {
  return 'updates';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function better_db_updates_form_update_script_selection_form_alter(&$form, &$form_state, $form_id) {
  $count = str_replace(' pending updates', '', $form['start']['#title']);
  $count = str_replace(' pending update', '', $count) - 1;

  unset($form['start']['better_db_updates_updates']);

  $all_files = better_db_updates_get_updates();

  foreach ($all_files as $module => $updates) {
    $items = array();

    foreach ($updates as $key => $info) {
      $update_exists = db_select('better_db_updates', 'b')
        ->fields('b', array())
        ->condition('module_name', $module)
        ->condition('update_filename', $info->name)
        ->execute()
        ->fetchAll();
      if (empty($update_exists)) {

        $docblock = better_db_updates_get_file_doc_block($info->uri);
        $update_description = $key . ' - ' . better_db_updates_parse_block($docblock);

        $items[$key] = $update_description;
        $count++;
      }
    }

    if (!empty($items)) {
      if (isset($form['start'][$module . '_updates'])) {
        $form['start'][$module . '_updates']['#items'] = array_merge($form['start'][$module . '_updates']['#items'], $items);
      }
      else {
        $form['start'][$module . '_updates'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
          '#title' => $module . ' module',
        );
      }
    }
  }

  if ($count > 0) {
    $form['start']['#title'] = format_plural($count, '1 pending update', '@count pending updates');
  }
  else {
    drupal_set_message(t('No pending updates.'));
    unset($form['start']);
    unset($form['help']);
    unset($form['actions']);
  }
}

/**
 * Get all better db updates.
 *
 * @param $modules
 * @return array
 */
function better_db_updates_get_updates($modules = array()) {
  $directories = array();

  foreach (module_implements('better_db_updates_directory') as $module) {
    if (empty($modules) || in_array($module, $modules)) {
      $function = $module . '_better_db_updates_directory';
      $result = $function();
      if ($result && is_string($result)) {
        $directories[$module] = drupal_get_path('module', $module) . '/' . $result;
      }
    }
  }

  $all_files = array();

  $extension = 'inc';
  foreach ($directories as $module => $path) {
    $all_files[$module] = file_scan_directory($path, '/\.' . $extension . '$/', array('key' => 'name'));
  }

  return $all_files;
}

/**
 * Get doc block from a given file.
 *
 * @param $file
 * @return string
 */
function better_db_updates_get_file_doc_block($file) {
  $doc_comments = array_filter(
    token_get_all(file_get_contents($file)), function($entry) {
      return $entry[0] == T_DOC_COMMENT;
    }
  );

  $file_doc_comment = array_shift($doc_comments);

  return $file_doc_comment[1];
}

/**
 * Parse a given doc block and return the description text.
 *
 * @param $docblock
 * @return string
 */
function better_db_updates_parse_block($docblock) {
  $description = '';

  // split at each line
  foreach (preg_split("/(\r?\n)/", $docblock) as $line){
    // if starts with an asterisk
    if (preg_match('/^(?=\s+?\*[^\/])(.+)/', $line, $matches)) {
      $info = $matches[1];

      // remove wrapping whitespace
      $info = trim($info);
      // remove leading asterisk
      $info = preg_replace('/^(\*\s+?)/', '', $info);

      // if it doesn't start with an "@" symbol
      // then add to the description
      if ($info[0] !== "@") {
        $description .= "\n$info";
        continue;
      }
    }
  }

  return trim($description, "\n");
}
